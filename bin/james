#!/bin/bash

repo_path="${HOME}/GitHub"

prog_name=$(basename "${0}")

while [[ $# -gt 0 ]]; do
  key="${1}"
  case "${key}" in
  -m | --manifest)
    manifest="${2}"
    shift
    shift
    ;;
  -o | --object)
    object="${2}"
    shift
    shift
    ;;
  -e | --endpoint)
    endpoint="${2}"
    shift
    shift
    ;;
  -c | --cat)
    cat="true"
    shift
    shift
    ;;
  -p | --push)
    push="true"
    shift
    ;;
  *)
    positional+=("${1}")
    shift
    ;;
  esac
done

set -- "${positional[@]}"

usage() {

  echo "${prog_name} Usage:"
  echo
  echo "  Update manifest:"
  echo "    ${prog_name} --manifest example --endpoint endpoint --object object"
  echo
  echo "  Dump raw source of the given manifest to the standard output:"
  echo "    ${prog_name} --manifest example --cat"
  echo
  echo "  Update JPS instead of manifest:"
  echo "    ${prog_name} --manifest example --endpoint endpoint --object object --push"
  echo "      Attention: Provide Base64 encoded credentials via variable"
  echo "        $ export credentials=\"abcdefgh=\""

}

if [ -z "${manifest}" ]; then
  usage && exit 1
elif [ "${cat}" = "true" ]; then
  jq '.' "${repo_path}/james/manifests/${manifest}.json" && exit 0
elif [ -z "${object}" ]; then
  usage && exit 1
elif [ -z "${endpoint}" ]; then
  usage && exit 1
elif [ ! -s "/usr/local/bin/sponge" ]; then
  echo "Error: ${prog_name} requires sponge, install it with Homebrew: \$ brew install moreutils" && exit 1
fi

update_manifest() {

  echo "=> Update manifest '${manifest}' with object '${object}' on endpoint '${endpoint}'"

  endpoint_list=(
    "categories"
    "computerextensionattributes"
    "computergroups"
    "packages"
    "policies"
    "osxconfigurationprofiles"
    "restrictedsoftware"
    "policies_remove"
    "mobiledeviceextensionattributes"
    "mobiledevicegroups"
    "mobiledeviceapplications"
  )

  for endpoint_item in "${endpoint_list[@]}"; do
    for elements in $(jq --arg t "${endpoint_item}" '.[$t] | length' "${repo_path}/james/manifests/${manifest}.json"); do
      elements=$((elements - 1))
      for n in $(seq 0 "$elements"); do
        if [ "$(jq -r --arg t "${endpoint_item}" --arg n "${n}" '.[$t][$n | tonumber]' "${repo_path}/james/manifests/${manifest}.json")" = "${object}" ]; then
          jq --arg t "${endpoint_item}" --arg n "${n}" 'del(.[$t][$n | tonumber])' \
            "${repo_path}/james/manifests/${manifest}.json" | sponge "${repo_path}/james/manifests/${manifest}.json"
        fi
      done
    done
  done

  jq \
    --arg e "${endpoint}" \
    --arg o "${object}" \
    '.[$e] |= (. + [$o] | unique)' \
    "${repo_path}/james/manifests/${manifest}.json" | sponge "${repo_path}/james/manifests/${manifest}.json"

}

if [ "${push}" = "true" ]; then
  if [ -z "${credentials}" ]; then
    echo "Error: Missing 'credentials', please provide Base64 encoded credentials via variable"
    echo "  $ export credentials=\"abcdefgh=\""
    exit 1
  else

    if [ -s "${repo_path}/james/manifests/${manifest}.json" ]; then

      jps=$(jq -r '.url' "${repo_path}/james/manifests/${manifest}.json")
      jps="${jps%/}"
      jps_purged=$(jq -r '.url' "${repo_path}/james/manifests/${manifest}.json" | sed 's~http[s]*://~~g')

      if [ "$(curl -sL -w "%{http_code}" "${jps}/healthCheck.html" -o /dev/null)" == "200" ]; then
        if [ "$(curl -s "${jps}/healthCheck.html")" == "[]" ]; then

          for endpoint_check in "${repo_path}/james/templates/"*"${endpoint}/${object}.xml"; do

            object_purged="${object// /%20}"

            if [ "$(curl -sL -H "Authorization: Basic ${credentials}" -w "%{http_code}" "${jps}/JSSResource/${endpoint}/name/${object_purged}" -o /dev/null)" == "200" ]; then

              echo "=> Update resource '${endpoint}/${object}' on '${jps_purged}'"

              if [ "${endpoint}" = "osxconfigurationprofiles" ]; then
                echo "Error: Endpoint '${endpoint}' not supported" && exit 1
              fi

              curl \
                -s \
                -w "\n" \
                -S \
                -H "Authorization: Basic ${credentials}" \
                -H "Content-Type: application/xml" \
                -T "${repo_path}/james/templates/${endpoint}/${object}.xml" \
                -X PUT \
                "${jps}/JSSResource/${endpoint}/name/${object_purged}"

              if [ -s "${repo_path}/james/icons/${object/ Self Service/}.png" ]; then
                icon="${repo_path}/james/icons/${object/ Self Service/}.png"
                object_id=$(curl -s -H "Authorization: Basic ${credentials}" -H "Accept: application/xml" -X "GET" "${jps}/JSSResource/policies/name/${object_purged}" | xmllint --xpath "/policy/general/id/text()" -)
                if [ -z "$(curl -s -H "Authorization: Basic ${credentials}" "${jps}/JSSResource/policies/name/${object_purged}" | xmllint --xpath "/policy/self_service/self_service_icon/filename/text()" - 2>/dev/null)" ]; then
                  echo "=> Add Self Service icon '${icon}' to policy '${object_purged}'"
                  curl -s -w "\n" -S -H "Authorization: Basic ${credentials}" -X "POST" -F name=@"${icon}" "${jps}/JSSResource/fileuploads/policies/id/${object_id}"
                fi
              fi

              exit 0

            else

              echo "=> Add resource '${endpoint}/${object}' on '${jps_purged}'"

              if [ "${endpoint}" = "osxconfigurationprofiles" ]; then
                echo "Error: Endpoint '${endpoint}' not supported" && exit 1
              fi

              curl \
                -s \
                -w "\n" \
                -S \
                -H "Authorization: Basic ${credentials}" \
                -H "Content-Type: application/xml" \
                -T "${repo_path}/james/templates/${endpoint}/${object}.xml" \
                -X POST \
                "${jps}/JSSResource/${endpoint}/id/0"

              if [ -s "${repo_path}/james/icons/${object/ Self Service/}.png" ]; then
                icon="${repo_path}/james/icons/${object/ Self Service/}.png"
                object_id=$(curl -s -H "Authorization: Basic ${credentials}" -H "Accept: application/xml" -X "GET" "${jps}/JSSResource/policies/name/${object_purged}" | xmllint --xpath "/policy/general/id/text()" -)
                if [ -z "$(curl -s -H "Authorization: Basic ${credentials}" "${jps}/JSSResource/policies/name/${object_purged}" | xmllint --xpath "/policy/self_service/self_service_icon/filename/text()" - 2>/dev/null)" ]; then
                  echo "=> Add Self Service icon '${icon}' to policy '${object_purged}'"
                  curl -s -w "\n" -S -H "Authorization: Basic ${credentials}" -X "POST" -F name=@"${icon}" "${jps}/JSSResource/fileuploads/policies/id/${object_id}"
                fi
              fi

              exit 0

            fi

          done

        else
          echo "Error: JPS '${jps}' seems to be offline" && exit 1
        fi
      else
        echo "Error: JPS '${jps}' seems to be offline" && exit 1
      fi

    else
      echo "Error: Manifest '${manifest}' does not exist" && exit 1
    fi

  fi

fi

if [ -s "${repo_path}/james/manifests/${manifest}.json" ]; then
  for template in "${repo_path}/james/templates/"*"${endpoint}/${object}.xml"; do
    if [ -e "${template}" ]; then
      update_manifest
      [ -s "${repo_path}/james/templates/policies/${object} Self Service.xml" ] && object="${object} Self Service" && update_manifest
      break
    elif [ "${endpoint}" = "policies_remove" ]; then
      update_manifest
      [ -s "${repo_path}/james/templates/policies/${object} Self Service.xml" ] && object="${object} Self Service" && update_manifest
      break
    else
      for endpoint_check in "${repo_path}/james/templates/"*"${endpoint}"; do
        if [ ! -d "${endpoint_check}" ]; then
          echo "Error: Endpoint '${endpoint}' does not exist" && exit 1
        fi
      done
      echo "Error: Object '${object}' does not exist" && exit 1
    fi
  done
else
  echo "Error: Manifest '${manifest}' does not exist" && exit 1
fi
